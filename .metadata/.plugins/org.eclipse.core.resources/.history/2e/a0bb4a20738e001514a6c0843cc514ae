package camden.ivarcode.net;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

public class Game {

	private Piece currentPiece;
	private String turn;
	private Board board;
	private int sideWidth, topHeight, sqDim;

	public Game(int sW, int tH, int sD) {
		setTurn("white");
		board = new Board();
		this.sideWidth = sW;
		this.topHeight = tH;
		this.sqDim = sD;
	}
	//Getters & Setters
	public Piece getPiece(Location src) {
		return board.getPiece(src);
	}
	public String getTurn() {
		return turn;
	}
	public void setTurn(String turn) {
		this.turn = turn;
	}
	public Piece getCurrentPiece() {
		return currentPiece;
	}
	public void setCurrentPiece(Piece currentPiece) {
		this.currentPiece = currentPiece;
	}
	public void changeTurn() {
		if (getTurn().equals("white")) {
			setTurn("black");
		} else {
			setTurn("white");
		}
	}
	//

	public void makeMove(Location src, Location dest) {
		if (isLegalMove(src,dest)) {
			System.out.println("isLegalMove");
			changeTurn();
			board.movePiece(src, dest);
			//TODO record move			
		}
	}

	private boolean isLegalMove(Location src, Location dest) {
		ArrayList<Move> moves = getMoveOptions();
		for (int i = 0; i < moves.size(); i++) {
			if (src.getFile() == moves.get(i).getSrc().getFile() && 
					src.getRank() == moves.get(i).getSrc().getRank() && 
					dest.getFile() == moves.get(i).getDest().getFile() && 
					dest.getRank() == moves.get(i).getDest().getRank()) {
				return true;
			}
		}

		return false;
	}

	public ArrayList<Move> getMoveOptions() {
		ArrayList<Move> moves = new ArrayList<Move>();
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				Piece piece = getPiece(i,j);
				if (piece != null && piece.getColor().equals(turn)) {				
					if (piece instanceof King) {
						moves.addAll(kingMoves(new Location(i,j)));
					} else if (piece instanceof Queen) {
						moves.addAll(queenMoves(new Location(i,j)));
					} else if (piece instanceof Bishop) {
						moves.addAll(bishopMoves(new Location(i,j)));
					} else if (piece instanceof Knight) {
						moves.addAll(knightMoves(new Location(i,j)));
					} else if (piece instanceof Rook) {
						moves.addAll(rookMoves(new Location(i,j)));
					} else if (piece instanceof Pawn) {
						moves.addAll(pawnMoves(new Location(i,j),turn));
					}
				}
			}
		}
		return moves;
	}

	//Draw
	public void drawBoard(Graphics g) {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				drawSquare(g, new Location(i,j));
			}
		}
		g.setColor(Color.BLACK);
		g.drawRect(sideWidth, topHeight, sqDim*8, sqDim*8);
	}
	public void drawPiece(Graphics g, Location loc) {
		if (getPiece(loc) != null) {
			g.drawImage(getPiece(loc).getImg(), 
					sideWidth+(sqDim*loc.getFileByInt()), 
					topHeight+(sqDim*(7-loc.getRank())), 
					null);
		}
	}
	public void drawPieceAt(Graphics g, Location loc, Location newloc) {
		if (getPiece(loc) != null) {
			g.drawImage(getPiece(loc).getImg(), 
					sideWidth+(sqDim*newloc.getFileByInt()), 
					topHeight+(sqDim*(7-newloc.getRank())), 
					null);
		}
	}
	public void drawSquare(Graphics g, Location loc) {
		if ((loc.getFileByInt()+loc.getRank())%2 == 0) {
			g.setColor(Color.DARK_GRAY);
		} else {
			g.setColor(Color.WHITE);
		}
		g.fillRect(sideWidth+(sqDim*loc.getFileByInt()), 
				topHeight+(sqDim*(7-loc.getRank())), 
				sqDim, sqDim);
	}
	public void drawSquareTinted(Graphics g, Location loc) {
		if ((loc.getFileByInt()+loc.getRank())%2 == 0) {
			g.setColor(Color.YELLOW); // TODO change
		} else {
			g.setColor(Color.YELLOW); // TODO change
		}
		g.fillRect(sideWidth+(sqDim*loc.getFileByInt()), 
				topHeight+(sqDim*(7-loc.getRank())), 
				sqDim, sqDim);
	}
	//
}
