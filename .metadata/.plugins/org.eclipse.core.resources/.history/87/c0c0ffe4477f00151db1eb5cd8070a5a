package camden.ivarcode.net;

import java.awt.Color;
import java.awt.Graphics;

public class Board {

	private static int sqDim = 60;
	private static int sideWidth = 150;
	private static int topHeight = 50;
	private Piece[][] board = new Piece[8][8];
	private int[][] whiteThreats = new int[8][8];
	private int[][] blackThreats = new int[8][8];
	private Piece whiteKing, blackKing;
	private String turn;
	private Graphics g;

	public Board() {
		//initialize nothing
	}

	public Board(Piece wRook1, Piece wKnight1, Piece wBishop1, Piece wQueen,
			Piece wKing, Piece wBishop2, Piece wKnight2, Piece wRook2, 
			Piece wPawn1, Piece wPawn2, Piece wPawn3, Piece wPawn4, 
			Piece wPawn5, Piece wPawn6, Piece wPawn7, Piece wPawn8, 
			Piece bRook1, Piece bKnight1, Piece bBishop1, Piece bQueen,
			Piece bKing, Piece bBishop2, Piece bKnight2, Piece bRook2, 
			Piece bPawn1, Piece bPawn2, Piece bPawn3, Piece bPawn4, 
			Piece bPawn5, Piece bPawn6, Piece bPawn7, Piece bPawn8, Graphics g) {
		this.g = g;
		whiteKing = wKing;
		blackKing = bKing;
		turn = "white";
		
		place(whiteKing, whiteKing.getLoc());
		board[7][4] = blackKing;
		board[0][3] = wQueen;
		board[7][3] = bQueen;
		board[0][2] = wBishop1;
		board[0][5] = wBishop2;
		board[7][2] = bBishop1;
		board[7][5] = bBishop2;
		board[0][1] = wKnight1;
		board[0][6] = wKnight2;
		board[7][1] = bKnight1;
		board[7][6] = bKnight2;
		board[0][0] = wRook1;
		board[0][7] = wRook2;
		board[7][0] = bRook1;
		board[7][7] = bRook2;
		
		board[1][0] = wPawn1;
		board[6][0] = bPawn1;
		board[1][1] = wPawn2;
		board[6][1] = bPawn2;
		board[1][2] = wPawn3;
		board[6][2] = bPawn3;
		board[1][3] = wPawn4;
		board[6][3] = bPawn4;
		board[1][4] = wPawn5;
		board[6][4] = bPawn5;
		board[1][5] = wPawn6;
		board[6][5] = bPawn6;
		board[1][6] = wPawn7;
		board[6][6] = bPawn7;
		board[1][7] = wPawn8;
		board[6][7] = bPawn8;
	}

	public Piece getPiece(int rank, char file) {
		int i = -1; //throws error if case not 'a'-'h'
		switch (file) {
		case 'a':	i = 0;
		case 'b':	i = 1;
		case 'c':	i = 2;
		case 'd':	i = 3;
		case 'e':	i = 4;
		case 'f':	i = 5;
		case 'g':	i = 6;
		case 'h':	i = 7;
		}
		return board[i][file];
	}

	public void movePiece(Piece piece, int orig_rank, char orig_file, 
			int new_rank, char new_file) {
		if (moveAllowed(piece, orig_rank, orig_file, new_rank, new_file)) {
			//TODO move piece			
		}
	}

	public boolean moveAllowed(Piece piece, int orig_rank, char orig_file, 
			int new_rank, char new_file) {
		if ((getPiece(orig_rank, orig_file) != piece) 
				|| (ableToMove(new_rank, new_file)) 
				|| (kingInCheck())
				|| (!isTurn(piece.getColor()))) {
			return false;
		}

		return true;
	}

	private boolean ableToMove(int new_rank, char new_file) {
		// TODO Auto-generated method stub
		return false;
	}

	private boolean isTurn(String color) {
		if (turn == color) {
			return true;
		} else {
			return false;
		}
	}

	private boolean kingInCheck() {
		int r;
		int f;
		if (isTurn("white")) {
			r = whiteKing.getLoc().getRank();
			f = whiteKing.getLoc().getFileByInt();
		} else {
			r = blackKing.getLoc().getRank();
			f = blackKing.getLoc().getFileByInt();
		}
		if (isTurn("white")) {
			return whiteThreatens(r, f);
		} else {
			return blackThreatens(r, f);
		}
	}

	private boolean blackThreatens(int r, int f) {
		boolean isThreat = false;
		int tR = r, tF = f;
		//up
		while (tR-1 > -1) {
			tR -= 1;
			if (board[tR][tF] == whiteRook 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//down
		tR = r; tF = f;
		while (tR+1 < 8) {
			tR += 1;
			if (board[tR][tF] == whiteRook 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//right
		tR = r; tF = f;
		while (tF+1 < 8) {
			tF += 1;
			if (board[tR][tF] == whiteRook 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//left
		tR = r; tF = f;
		while (tF-1 > -1) {
			tF -= 1;
			if (board[tR][tF] == whiteRook 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//up-right
		tR = r; tF = f;
		while (tR-1 > -1 && tF+1 < 8) {
			tR -= 1;
			tF += 1;
			if (board[tR][tF] == whiteBishop 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//up-left
		tR = r; tF = f;
		while (tR-1 > -1 && tF-1 > -1) {
			tR -= 1;
			tF -= 1;
			if (board[tR][tF] == whiteBishop 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//down-right
		tR = r; tF = f;
		while (tR+1 < 8 && tF+1 < 8) {
			tR += 1;
			tF += 1;
			if (board[tR][tF] == whiteBishop 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//down-left
		tR = r; tF = f;
		while (tR+1 < 8 && tF-1 > -1) {
			tR += 1;
			tF -= 1;
			if (board[tR][tF] == whiteBishop 
					|| board[tR][tF] == whiteQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//knight
		if (r+2 < 8 && f+1 < 8)	{
			if (board[r+2][f+1] == whiteKnight) {
				isThreat = true;
			}
		}
		if (r+2 < 8 && f-1 > -1) {
			if (board[r+2][f-1] == whiteKnight) {
				isThreat = true;
			}
		}
		if (r+1 < 8 && f+2 < 8)	{
			if (board[r+1][f+2] == whiteKnight) {
				isThreat = true;
			}
		}
		if (r+1 < 8 && f-2 > -1) {
			if (board[r+1][f-2] == whiteKnight) {
				isThreat = true;
			}
		}
		if (r-1 > -1 && f+2 < 8) {
			if (board[r-1][f+2] == whiteKnight) {
				isThreat = true;
			}
		}
		if (r-1 > -1 && f-2 > -1) {
			if (board[r-1][f-2] == whiteKnight) {
				isThreat = true;
			}
		}
		if (r-2 > -1 && f+1 < 8) {
			if (board[r-2][f+1] == whiteKnight) {
				isThreat = true;
			}
		}
		if (r-2 > -1 && f-1 > -1) {
			if (board[r-2][f-1] == whiteKnight) {
				isThreat = true;
			}
		}
		//around (king-check) && include pawn check here
		//up
		if (r-1 > -1) {
			if (board[r-1][f] == whiteKing) {
				isThreat = true;
			}
		}
		//down
		if (r+1 < 8) {
			if (board[r+1][f] == whiteKing) {
				isThreat = true;
			}
		}
		//right
		if (f+1 < 8) {
			if (board[r][f+1] == whiteKing) {
				isThreat = true;
			}
		}
		//left
		if (f-1 > -1) {
			if (board[r][f-1] == whiteKing) {
				isThreat = true;
			}
		}
		//up-right
		if (r-1 > -1 && f+1 < 8) {
			if (board[r-1][f+1] == whiteKing) {
				isThreat = true;
			}
		}
		//up-left
		if (r-1 > -1 && f-1 > -1) {
			if (board[r-1][f-1] == whiteKing) {
				isThreat = true;
			}
		}
		//down-right
		if (r+1 < 8 && f+1 < 8) {
			if (board[r+1][f+1] == whiteKing
					|| board[r+1][f+1] == whitePawn) {
				isThreat = true;
			}
		}
		//down-left
		if (r+1 < 8 && f-1 > -1) {
			if (board[r+1][f-1] == whiteKing
					|| board[r+1][f-1] == whitePawn) {
				isThreat = true;
			}
		}
		return isThreat;
	}

	private boolean whiteThreatens(int r, int f) {
		boolean isThreat = false;
		int tR = r, tF = f;
		//up
		while (tR-1 > -1) {
			tR -= 1;
			if (board[tR][tF] == blackRook 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//down
		tR = r; tF = f;
		while (tR+1 < 8) {
			tR += 1;
			if (board[tR][tF] == blackRook 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//right
		tR = r; tF = f;
		while (tF+1 < 8) {
			tF += 1;
			if (board[tR][tF] == blackRook 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//left
		tR = r; tF = f;
		while (tF-1 > -1) {
			tF -= 1;
			if (board[tR][tF] == blackRook 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//up-right
		tR = r; tF = f;
		while (tR-1 > -1 && tF+1 < 8) {
			tR -= 1;
			tF += 1;
			if (board[tR][tF] == blackBishop 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//up-left
		tR = r; tF = f;
		while (tR-1 > -1 && tF-1 > -1) {
			tR -= 1;
			tF -= 1;
			if (board[tR][tF] == blackBishop 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//down-right
		tR = r; tF = f;
		while (tR+1 < 8 && tF+1 < 8) {
			tR += 1;
			tF += 1;
			if (board[tR][tF] == blackBishop 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//down-left
		tR = r; tF = f;
		while (tR+1 < 8 && tF-1 > -1) {
			tR += 1;
			tF -= 1;
			if (board[tR][tF] == blackBishop 
					|| board[tR][tF] == blackQueen) {
				isThreat = true;
			} else if (board[tR][tF] != null) {
				break;
			}
		}
		//knight
		if (r+2 < 8 && f+1 < 8)	{
			if (board[r+2][f+1] == blackKnight) {
				isThreat = true;
			}
		}
		if (r+2 < 8 && f-1 > -1) {
			if (board[r+2][f-1] == blackKnight) {
				isThreat = true;
			}
		}
		if (r+1 < 8 && f+2 < 8)	{
			if (board[r+1][f+2] == blackKnight) {
				isThreat = true;
			}
		}
		if (r+1 < 8 && f-2 > -1) {
			if (board[r+1][f-2] == blackKnight) {
				isThreat = true;
			}
		}
		if (r-1 > -1 && f+2 < 8) {
			if (board[r-1][f+2] == blackKnight) {
				isThreat = true;
			}
		}
		if (r-1 > -1 && f-2 > -1) {
			if (board[r-1][f-2] == blackKnight) {
				isThreat = true;
			}
		}
		if (r-2 > -1 && f+1 < 8) {
			if (board[r-2][f+1] == blackKnight) {
				isThreat = true;
			}
		}
		if (r-2 > -1 && f-1 > -1) {
			if (board[r-2][f-1] == blackKnight) {
				isThreat = true;
			}
		}
		//around (king-check) && include pawn check here
		//up
		if (r-1 > -1) {
			if (board[r-1][f] == blackKing) {
				isThreat = true;
			}
		}
		//down
		if (r+1 < 8) {
			if (board[r+1][f] == blackKing) {
				isThreat = true;
			}
		}
		//right
		if (f+1 < 8) {
			if (board[r][f+1] == blackKing) {
				isThreat = true;
			}
		}
		//left
		if (f-1 > -1) {
			if (board[r][f-1] == blackKing) {
				isThreat = true;
			}
		}
		//up-right
		if (r-1 > -1 && f+1 < 8) {
			if (board[r-1][f+1] == blackKing
					|| board[r-1][f+1] == blackPawn) {
				isThreat = true;
			}
		}
		//up-left
		if (r-1 > -1 && f-1 > -1) {
			if (board[r-1][f-1] == blackKing
					|| board[r-1][f-1] == blackPawn) {
				isThreat = true;
			}
		}
		//down-right
		if (r+1 < 8 && f+1 < 8) {
			if (board[r+1][f+1] == blackKing) {
				isThreat = true;
			}
		}
		//down-left
		if (r+1 < 8 && f-1 > -1) {
			if (board[r+1][f-1] == blackKing) {
				isThreat = true;
			}
		}
		return isThreat;
	}

	public void drawBoard() {
		g.setColor(Color.DARK_GRAY);
		g.drawRect(sideWidth, topHeight, sqDim*8, sqDim*8);
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				g.fillRect(sideWidth+sqDim+(sqDim*2*j), 
						topHeight+(sqDim*2*i), 
						sqDim, sqDim);
				g.fillRect(sideWidth+(sqDim*2*j), 
						topHeight+sqDim+(sqDim*2*i), 
						sqDim, sqDim);
			}
		}
	}
	
	public void draw() {
		//TODO
		//DRAW BOARD
		
	}

}
