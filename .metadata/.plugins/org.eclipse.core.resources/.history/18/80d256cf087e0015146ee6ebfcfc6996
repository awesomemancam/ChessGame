package camden.ivarcode.net;

public class Board {

	private Piece[][] board = new Piece[8][8];
	private Piece whiteKing, blackKing;
	private boolean whiteTurn;
	
	public Board() {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				//TODO
				//initialize empty set of Pieces here?
			}
		}
	}
	
	public Board(Piece wKing, Piece wQueen, Piece wBishop, Piece wKnight, Piece wRook, Piece wPawn,
			Piece bKing, Piece bQueen, Piece bBishop, Piece bKnight, Piece bRook, Piece bPawn) {
		for (int j = 0; j < 8; j++) {
			board[1][j] = wPawn;
			board[6][j] = bPawn;
		}
		whiteTurn = true;
		whiteKing = wKing;
		blackKing = bKing;
		board[0][4] = whiteKing;
		board[7][4] = blackKing;
	}
	
	public Piece getPiece(int rank, char file) {
		int i = -1; //throws error if case not 'a'-'h'
		switch (file) {
			case 'a':	i = 0;
			case 'b':	i = 1;
			case 'c':	i = 2;
			case 'd':	i = 3;
			case 'e':	i = 4;
			case 'f':	i = 5;
			case 'g':	i = 6;
			case 'h':	i = 7;
		}
		return board[i][file];
	}
	
	public static void movePiece(Piece piece, int orig_rank, char orig_file, 
			char new_rank, int new_file) {
		if (moveAllowed(piece, orig_rank, orig_file, new_rank, new_file)) {
			//TODO move piece			
		}
	}
	
	public boolean moveAllowed(Piece piece, char orig_rank, int orig_file, 
			char new_rank, int new_file) {
		if ((getPiece(orig_rank, orig_file) != piece) 
				|| (!piece.ableToMove(new_rank, new_file)) 
				|| (kingInCheck())
				|| (!isTurn(piece.getColor()))) {
			return false;
		}
		
		return true;
	}

	private boolean isTurn(String color) {
		// TODO Auto-generated method stub
		return false;
	}

	private boolean kingInCheck() {
		// TODO Auto-generated method stub
		return false;
	}
	
}
